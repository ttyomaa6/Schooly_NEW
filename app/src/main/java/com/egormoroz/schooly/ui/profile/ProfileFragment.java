package com.egormoroz.schooly.ui.profile;import static android.os.Looper.getMainLooper;import android.annotation.SuppressLint;import android.app.Activity;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.opengl.GLSurfaceView;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupMenu;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import androidx.activity.OnBackPressedCallback;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentActivity;import androidx.fragment.app.FragmentManager;import androidx.lifecycle.Lifecycle;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.viewpager2.adapter.FragmentStateAdapter;import androidx.viewpager2.widget.ViewPager2;import com.egormoroz.schooly.Callbacks;import com.egormoroz.schooly.FirebaseModel;import com.egormoroz.schooly.MainActivity;import com.egormoroz.schooly.Nontification;import com.egormoroz.schooly.R;import com.egormoroz.schooly.RecentMethods;import com.egormoroz.schooly.Subscriber;import com.egormoroz.schooly.ui.Model.SceneViewModelActivity;import com.egormoroz.schooly.ui.chat.User;import com.egormoroz.schooly.ui.main.ChatActivity;import com.egormoroz.schooly.ui.main.MainFragment;import com.egormoroz.schooly.ui.main.Shop.AccessoriesFragment;import com.egormoroz.schooly.ui.main.Shop.Clothes;import com.egormoroz.schooly.ui.main.Shop.ClothesFragment;import com.egormoroz.schooly.ui.main.Shop.HatsFragment;import com.egormoroz.schooly.ui.main.Shop.NewClothesAdapter;import com.egormoroz.schooly.ui.main.Shop.PopularFragment;import com.egormoroz.schooly.ui.main.Shop.ShoesFargment;import com.egormoroz.schooly.ui.main.Shop.ShopFragment;import com.egormoroz.schooly.ui.main.Shop.ViewingClothes;import com.egormoroz.schooly.ui.main.UserInformation;import com.egormoroz.schooly.ui.news.NewsItem;import com.egormoroz.schooly.ui.people.PeopleFragment;import com.egormoroz.schooly.ui.people.UserPeopleAdapter;import com.egormoroz.schooly.ui.profile.Wardrobe.CreateLookFragment;import com.egormoroz.schooly.ui.profile.Wardrobe.WardrobeAdapterProfile;import com.egormoroz.schooly.ui.profile.Wardrobe.WardrobeClothes;import com.egormoroz.schooly.ui.profile.Wardrobe.WardrobeFragment;import com.google.android.filament.Filament;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.android.material.bottomnavigation.BottomNavigationView;import com.google.android.material.bottomsheet.BottomSheetDialog;import com.google.android.material.progressindicator.CircularProgressIndicator;import com.google.android.material.tabs.TabLayout;import com.google.ar.core.exceptions.CameraNotAvailableException;import com.google.ar.sceneform.Node;import com.google.ar.sceneform.SceneView;import com.google.ar.sceneform.assets.RenderableSource;import com.google.ar.sceneform.math.Quaternion;import com.google.ar.sceneform.math.Vector3;import com.google.ar.sceneform.rendering.ModelRenderable;import com.google.ar.sceneform.ux.ArFragment;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.Query;import com.google.firebase.database.ServerValue;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FileDownloadTask;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Date;import java.util.Random;import java.util.function.Consumer;public class ProfileFragment extends Fragment {    private static String sendNickString;    FirebaseModel firebaseModel = new FirebaseModel();    Context profileContext, context;    EditText editText,messageEdit;    UserInformation info;    CircularProgressIndicator circularProgressIndicator;    WardrobeAdapterProfile.ItemClickListener itemClickListenerWardrobe;    TextView nickname,message,biographyTextView,looksCount,subscriptionsCount,subscribersCount,otherLooksCount,otherSubscriptionCount,            otherSubscribersCount,otherUserBiography,subscribeClose,subscribe            ,subscribeFirst,closeAccount,noClothes,buyClothesProfile,blockedAccount,emptyList;    DatabaseReference user;    WardrobeAdapterProfile.ItemClickListener itemClickListener;    // SceneLoader scene;    LinearLayout linearLooks,linearSubscribers,linearSubscriptions            ,linearLooksProfile,linearSubscribersProfile,linearSubscriptionsProfile;    // ModelSurfaceView modelSurfaceView;    SceneView mainLook, otherMainLook;    SendLookAdapter.ItemClickListener itemClickListenerSendLookAdapter;    // ModelRenderer modelRenderer;    RecyclerView looksRecycler,wardrobeRecycler,looksRecyclerOther,recyclerView;    ImageView moreSquare,back,newLook;    int profileValue;    String sendNick,looksCountString,subscriptionsCountString,subscribersCountString            ,otherLooksCountString,otherSubscriptionCountString,            otherSubscribersCountString,type,nicknameCallback,userName;    Fragment fragment;    View root;    ViewPager2 viewPager,viewPagerOther;    FragmentAdapter fragmentAdapter;    FragmentAdapterOther fragmentAdapterOther;    TabLayout tabLayout,tabLayoutOther;    private float[] backgroundColor = new float[]{0f, 0f, 0f, 1.0f};    private Handler handler;    int a,profileCheckValue;    UserInformation userInformation;    @Override    public void onAttach(Context context) {        super.onAttach(context);        profileContext = context;    }    public ProfileFragment(String type, String sendNick,Fragment fragment,UserInformation userInformation) {        this.type = type;        this.sendNick=sendNick;        this.fragment=fragment;        this.userInformation=userInformation;    }    public static ProfileFragment newInstance(String type, String sendNick, Fragment fragment, UserInformation userInformation) {        return new ProfileFragment(type, sendNick,fragment,userInformation);    }    public void open() {        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                {                    user.addListenerForSingleValueEvent(new ValueEventListener() {                        @Override                        public void onDataChange(DataSnapshot snapshot) {                            if (snapshot.child(nick).exists()) {                                AcceptChatRequest();                            }                        }                        @Override                        public void onCancelled(DatabaseError databaseError) {                        }                    });                }                Intent i = new Intent(getActivity(), ChatActivity.class);                //Getting information about user(friend)                i.putExtra("othUser", info.getNick());                i.putExtra("curUser", nick);                i.putExtra("groupName", "one");                i.putExtra("visit_user_id", info.getUid());                i.putExtra("visit_image", ChatActivity.class);                startActivity(i);            }        });        ((Activity) getActivity()).overridePendingTransition(0, 0);    }    @Override    public View onCreateView(@NonNull LayoutInflater inflater,                             @Nullable ViewGroup container,                             @Nullable Bundle savedInstanceState) {        context = container.getContext();        if(type.equals("user")){            root=inflater.inflate(R.layout.fragment_profile, container, false);            nickname=root.findViewById(R.id.usernick);        }else if(type.equals("other")){            root=inflater.inflate(R.layout.fragment_otheruser, container, false);            nickname=root.findViewById(R.id.otherusernick);            root.findViewById(R.id.message);        }else if(type.equals("userback")){            root=inflater.inflate(R.layout.fragment_profileback, container, false);            nickname=root.findViewById(R.id.usernick);        }        Filament.init();//        AppBarLayout abl=getActivity().findViewById(R.id.AppBarLayout);//        abl.setVisibility(abl.GONE);        BottomNavigationView bnv = getActivity().findViewById(R.id.bottomNavigationView);        bnv.setVisibility(bnv.VISIBLE);        firebaseModel.initAll();        FirebaseStorage firebaseStorage = FirebaseStorage.getInstance();        StorageReference storageReference = firebaseStorage.getReference().child("3d models").child("untitled.glb");        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                nicknameCallback=nick;            }        });        return root;    }    @SuppressLint("ResourceType")    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        firebaseModel.initAll();        switch (type) {            case "user":                Bundle b = getActivity().getIntent().getExtras();                try {                    String[] backgroundColors = b.getString("backgroundColor").split(" ");                    backgroundColor[0] = Float.parseFloat(backgroundColors[0]);                    backgroundColor[1] = Float.parseFloat(backgroundColors[1]);                    backgroundColor[2] = Float.parseFloat(backgroundColors[2]);                    backgroundColor[3] = Float.parseFloat(backgroundColors[3]);                } catch (Exception ex) {                    // Assuming default background color                }                ///////////////////////// set nickname /////////////////////                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(),                        firebaseModel,                        new Callbacks.GetUserNickByUid() {                            @Override                            public void PassUserNick(String nick) {                                nickname.setText(nick);                            }                        });                //////////////////////////////////////////////////                ImageView imageView = view.findViewById(R.id.settingsIcon);                imageView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ((MainActivity) getActivity()).setCurrentFragment(SettingsFragment.newInstance("user",fragment,userInformation));                    }                });                newLook=view.findViewById(R.id.newLook);                newLook.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(CreateLookFragment.newInstance("user",fragment,userInformation), getActivity());                    }                });                ///////// I want GM on CF                ImageView arrowtowardrobe = view.findViewById(R.id.arrowtowardrobe);                arrowtowardrobe.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(WardrobeFragment.newInstance("user",fragment,userInformation), getActivity());                    }                });                TextView editing = view.findViewById(R.id.redact);                editing.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ((MainActivity) getActivity()).setCurrentFragment(EditingFragment.newInstance("user",fragment,userInformation));                    }                });                //////////////////////////////                viewPager=view.findViewById(R.id.viewPager);                tabLayout=view.findViewById(R.id.tabsprofile);                FragmentManager fm = getChildFragmentManager();                fragmentAdapter = new FragmentAdapter(fm, getLifecycle());                viewPager.setAdapter(fragmentAdapter);                tabLayout.addTab(tabLayout.newTab().setText("Образы"));                tabLayout.addTab(tabLayout.newTab().setText("Одежда"));                tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {                    @Override                    public void onTabSelected(TabLayout.Tab tab) {                        viewPager.setCurrentItem(tab.getPosition());                    }                    @Override                    public void onTabUnselected(TabLayout.Tab tab) {                    }                    @Override                    public void onTabReselected(TabLayout.Tab tab) {                    }                });                viewPager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {                    @Override                    public void onPageSelected(int position) {                        tabLayout.selectTab(tabLayout.getTabAt(position));                    }                });                biographyTextView=view.findViewById(R.id.biography);                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                    @Override                    public void PassUserNick(String nick) {                        RecentMethods.getBio(nicknameCallback, firebaseModel, new Callbacks.GetBio() {                            @Override                            public void GetBiography(String bio) {                                if(bio.length()==0){                                    biographyTextView.setText("Добавь описание!");                                }else {                                    biographyTextView.setText(bio);                                }                            }                        });                    }                });                looksCount=view.findViewById(R.id.looksCount);                subscriptionsCount=view.findViewById(R.id.subscriptionsCount);                subscribersCount=view.findViewById(R.id.subscribersCount);                setCounts();                linearLooksProfile=view.findViewById(R.id.linearLooksProfile);                linearSubscribersProfile=view.findViewById(R.id.subscribersLinearProfile);                linearSubscriptionsProfile=view.findViewById(R.id.subscriptionLinearProfile);                linearSubscribersProfile.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(SubscriberFragment.newInstance("user",fragment,userInformation), getActivity());                    }                });                linearSubscriptionsProfile.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(SubscriptionsFragment.newInstance("user",fragment,userInformation), getActivity());                    }                });                ////////////////WARDROBE/////////////                TextView texttowardrobe = view.findViewById(R.id.shielf);                texttowardrobe.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(WardrobeFragment                                .newInstance("user",fragment,userInformation), getActivity());                    }                });                wardrobeRecycler=view.findViewById(R.id.recyclerProfileToWardrobe);                noClothes=view.findViewById(R.id.noClothesText);                buyClothesProfile=view.findViewById(R.id.buyClothesProfile);                checkWardrobe();                itemClickListenerWardrobe=new WardrobeAdapterProfile.ItemClickListener() {                    @Override                    public void onItemClick(Clothes clothes) {                        RecentMethods.setCurrentFragment(WardrobeFragment.newInstance("user",fragment,userInformation), getActivity());                    }                };                //////////////////////////////////////                handler = new Handler(getMainLooper());                //      scene = new SceneLoader(this);                //               scene.init(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2FSciFiHelmet.gltf?alt=media&token=a82512c1-14bf-4faf-8f67-abeb70da7697"));                mainLook=view.findViewById(R.id.mainlookview);                StorageReference storageReference = FirebaseStorage.getInstance().getReference().child("Models");                StorageReference islandRef = storageReference.child("models/untitled.gltf");                File localFile = null;                try {                    localFile = File.createTempFile("model", ".gltf");                } catch (IOException ioException) {                    ioException.printStackTrace();                }                islandRef.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {                    @Override                    public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {                        // Local temp file has been created                    }                }).addOnFailureListener(new OnFailureListener() {                    @Override                    public void onFailure(@NonNull Exception exception) {                        // Handle any errors                    }                });                loadModels(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2Funtitled.glb?alt=media&token=657b45d7-a84b-4f2a-89f4-a699029401f7"), mainLook, ProfileFragment.this, 0.25f);                loadModels(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2Funtitled.glb?alt=media&token=657b45d7-a84b-4f2a-89f4-a699029401f7"), mainLook, ProfileFragment.this, 0.5f);                break;            case "other":                firebaseModel.getReference().child("users").child(sendNick).get()                        .addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                            @Override                            public void onComplete(@NonNull Task<DataSnapshot> task) {                                if(task.isSuccessful()){                                    DataSnapshot snapshot=task.getResult();                                    info=new UserInformation();                                    info.setAge(snapshot.child("age").getValue(Long.class));                                    info.setAvatar(snapshot.child("avatar").getValue(String.class));                                    info.setGender(snapshot.child("gender").getValue(String.class));                                    //////////////////userData.setMiners();                                    info.setNick(snapshot.child("nick").getValue(String.class));                                    info.setPassword(snapshot.child("password").getValue(String.class));                                    info.setPhone(snapshot.child("phone").getValue(String.class));                                    info.setUid(snapshot.child("uid").getValue(String.class));                                    info.setQueue(snapshot.child("queue").getValue(String.class));                                    info.setAccountType(snapshot.child("accountType").getValue(String.class));                                    info.setBio(snapshot.child("bio").getValue(String.class));                                    nickname.setText(sendNick);                                    sendNickString=info.getNick();                                    circularProgressIndicator=view.findViewById(R.id.profileIndicator);                                    user = firebaseModel.getUsersReference().child(info.getNick());                                    back=view.findViewById(R.id.back);                                    moreSquare=view.findViewById(R.id.moresquare);                                    back.setOnClickListener(new View.OnClickListener() {                                        @Override                                        public void onClick(View v) {                                            RecentMethods.setCurrentFragment(fragment, getActivity());                                        }                                    });                                    OnBackPressedCallback callback = new OnBackPressedCallback(true) {                                        @Override                                        public void handleOnBackPressed() {                                            RecentMethods.setCurrentFragment(fragment, getActivity());                                        }                                    };                                    if(getActivity()==null){                                    }else {                                        getActivity().getOnBackPressedDispatcher().addCallback(getActivity(), callback);                                    }                                    if (info.getAccountType().equals("open")){                                        checkOtherUserProfile();                                    }else {                                        profileCheckValue=3;                                    }                                    Log.d("AAA","d  "+profileCheckValue);                                    loadModels(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2Funtitled.glb?alt=media&token=657b45d7-a84b-4f2a-89f4-a699029401f7"), otherMainLook, ProfileFragment.this, 0.25f);                                    RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                                        @Override                                        public void PassUserNick(String nick) {                                            firebaseModel.getUsersReference().child(nick).child("subscription")                                                    .child(info.getNick()).get().addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                                                @Override                                                public void onComplete(@NonNull Task<DataSnapshot> task) {                                                    if(task.isSuccessful()){                                                        DataSnapshot snapshot1=task.getResult();                                                        if(profileCheckValue!=0){                                                            circularProgressIndicator.setVisibility(View.GONE);                                                            otherUserBiography=view.findViewById(R.id.otheruserbiography);                                                            subscribeClose=view.findViewById(R.id.subscribeClose);                                                            otherMainLook = view.findViewById(R.id.mainlookview);                                                            otherUserBiography.setText(info.getBio());                                                            subscribe=view.findViewById(R.id.addFriend);                                                            subscribeFirst=view.findViewById(R.id.SubscribeFirst);                                                            closeAccount=view.findViewById(R.id.closeAccount);                                                            tabLayoutOther=view.findViewById(R.id.tabsprofileother);                                                            viewPagerOther=view.findViewById(R.id.viewPagerOther);                                                            otherLooksCount=view.findViewById(R.id.looksCountOther);                                                            otherSubscriptionCount=view.findViewById(R.id.subscriptionCountOther);                                                            otherSubscribersCount=view.findViewById(R.id.subsCountOther);                                                            blockedAccount=view.findViewById(R.id.blockedAccount);                                                            setCountsOther();                                                            if (message != null) {                                                                message.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        open();                                                                    }                                                                });                                                            }                                                            if (profileCheckValue==2 || snapshot1.exists()) {                                                                otherLooksCount = view.findViewById(R.id.looksCountOther);                                                                otherSubscriptionCount = view.findViewById(R.id.subscriptionCountOther);                                                                otherSubscribersCount = view.findViewById(R.id.subsCountOther);                                                                closeAccount.setVisibility(View.GONE);                                                                subscribeFirst.setVisibility(View.GONE);                                                                blockedAccount.setVisibility(View.GONE);                                                                if(getActivity()!=null && isAdded()){                                                                    FragmentManager fm = getChildFragmentManager();                                                                    fragmentAdapterOther = new FragmentAdapterOther(fm, getLifecycle());                                                                    viewPagerOther.setAdapter(fragmentAdapterOther);                                                                }                                                                if(tabLayoutOther.getTabCount()==2){                                                                }else {                                                                    tabLayoutOther.addTab(tabLayoutOther.newTab().setText("Образы"));                                                                    tabLayoutOther.addTab(tabLayoutOther.newTab().setText("Одежда"));                                                                }                                                                tabLayoutOther.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {                                                                    @Override                                                                    public void onTabSelected(TabLayout.Tab tab) {                                                                        viewPagerOther.setCurrentItem(tab.getPosition());                                                                    }                                                                    @Override                                                                    public void onTabUnselected(TabLayout.Tab tab) {                                                                    }                                                                    @Override                                                                    public void onTabReselected(TabLayout.Tab tab) {                                                                    }                                                                });                                                                viewPagerOther.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {                                                                    @Override                                                                    public void onPageSelected(int position) {                                                                        tabLayoutOther.selectTab(tabLayoutOther.getTabAt(position));                                                                    }                                                                });                                                                moreSquare.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        showBottomSheetDialog();                                                                    }                                                                });                                                                linearSubscriptions = view.findViewById(R.id.subscriptionLinear);                                                                linearSubscribers = view.findViewById(R.id.subscribersLinear);                                                                linearSubscriptions.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        RecentMethods.setCurrentFragment(SubscriptionsFragmentOther.newInstance(fragment,info.getNick(),userInformation), getActivity());                                                                    }                                                                });                                                                linearSubscribers.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        RecentMethods.setCurrentFragment(SubscribesFragmentOther.newInstance(fragment,info.getNick(),userInformation), getActivity());                                                                    }                                                                });                                                                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                                                                    @Override                                                                    public void PassUserNick(String nick) {                                                                        Query query = firebaseModel.getUsersReference().child(nick).child("subscription")                                                                                .child(info.getNick());                                                                        query.addValueEventListener(new ValueEventListener() {                                                                            @Override                                                                            public void onDataChange(@NonNull DataSnapshot snapshot) {                                                                                if (snapshot.exists()) {                                                                                    subscribe.setBackgroundResource(R.drawable.corners10appcolor2dpstroke);                                                                                    subscribe.setTextColor(Color.parseColor("#F3A2E5"));                                                                                    subscribe.setText("Отписаться");                                                                                }else {                                                                                    subscribe.setText("Подписаться");                                                                                    subscribe.setTextColor(Color.parseColor("#FFFEFE"));                                                                                    subscribe.setBackgroundResource(R.drawable.corners10dpappcolor);                                                                                }                                                                            }                                                                            @Override                                                                            public void onCancelled(@NonNull DatabaseError error) {                                                                            }                                                                        });                                                                    }                                                                });                                                                subscribe.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                                                                            @Override                                                                            public void PassUserNick(String nick) {                                                                                firebaseModel.getUsersReference().child(nick)                                                                                        .child("subscription").child(info.getNick()).get().addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                                                                                    @Override                                                                                    public void onComplete(@NonNull Task<DataSnapshot> task) {                                                                                        if(task.isSuccessful()){                                                                                            DataSnapshot snapshot=task.getResult();                                                                                            if (snapshot.exists()) {                                                                                                a=1;                                                                                            } else {                                                                                                a=2;                                                                                            }                                                                                            firebaseModel.getUsersReference().child(info.getNick())                                                                                                    .child("requests").child(nick).get().addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                                                                                                @Override                                                                                                public void onComplete(@NonNull Task<DataSnapshot> task) {                                                                                                    if(task.isSuccessful()){                                                                                                        DataSnapshot snapshot=task.getResult();                                                                                                        if (snapshot.exists()) {                                                                                                            a=3;                                                                                                        }                                                                                                        firebaseModel.getUsersReference().child(info.getNick())                                                                                                                .child("blackList").child(nick).get().addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                                                                                                            @Override                                                                                                            public void onComplete(@NonNull Task<DataSnapshot> task) {                                                                                                                if(task.isSuccessful()){                                                                                                                    DataSnapshot snapshot=task.getResult();                                                                                                                    if (snapshot.exists()) {                                                                                                                        a=4;                                                                                                                    }                                                                                                                    firebaseModel.getUsersReference().child(nick)                                                                                                                            .child("blackList").child(info.getNick()).get().addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                                                                                                                        @Override                                                                                                                        public void onComplete(@NonNull Task<DataSnapshot> task) {                                                                                                                            if(task.isSuccessful()){                                                                                                                                DataSnapshot snapshot=task.getResult();                                                                                                                                if (snapshot.exists()) {                                                                                                                                    a=5;                                                                                                                                    subscribe.setText("Pазблокировать");                                                                                                                                    subscribe.setTextColor(Color.parseColor("#F3A2E5"));                                                                                                                                    subscribe.setBackgroundResource(R.drawable.corners10appcolor2dpstroke);                                                                                                                                }                                                                                                                                if(a!=0) {                                                                                                                                    if (a == 2) {                                                                                                                                        Log.d("#####", "ab  " + a);                                                                                                                                        Query query1=firebaseModel.getUsersReference().child(info.getNick())                                                                                                                                                .child("accountType");                                                                                                                                        query1.addListenerForSingleValueEvent(new ValueEventListener() {                                                                                                                                            @Override                                                                                                                                            public void onDataChange(@NonNull DataSnapshot snapshot) {                                                                                                                                                if(snapshot.getValue(String.class).equals("open")){                                                                                                                                                    firebaseModel.getReference().child("users").child(nick).child("subscription")                                                                                                                                                            .child(info.getNick()).setValue(info.getNick());                                                                                                                                                    firebaseModel.getReference().child("users").child(info.getNick()).child("subscribers")                                                                                                                                                            .child(nick).setValue(nick);                                                                                                                                                    String numToBase=firebaseModel.getReference().child("users")                                                                                                                                                            .child(info.getNick()).child("nontifications")                                                                                                                                                            .push().getKey();                                                                                                                                                    Date date = new Date();                                                                                                                                                    SimpleDateFormat formatter = new SimpleDateFormat("EEE, MMM dd hh:mm a");                                                                                                                                                    String dateAndTime = formatter.format(date);                                                                                                                                                    firebaseModel.getReference().child("users")                                                                                                                                                            .child(info.getNick()).child("nontifications")                                                                                                                                                            .child(numToBase).setValue(new Nontification(nick,"не отправлено","обычный"                                                                                                                                                            ,""," "," ","не просмотрено",numToBase,0));                                                                                                                                                    subscribe.setText("Отписаться");                                                                                                                                                    subscribe.setTextColor(Color.parseColor("#F3A2E5"));                                                                                                                                                    subscribe.setBackgroundResource(R.drawable.corners10appcolor2dpstroke);                                                                                                                                                    a=0;                                                                                                                                                }else {                                                                                                                                                    firebaseModel.getReference().child("users").child(info.getNick()).child("requests")                                                                                                                                                            .child(nick).setValue(nick);                                                                                                                                                    String numToBase=firebaseModel.getReference().child("users")                                                                                                                                                            .child(info.getNick()).child("nontifications")                                                                                                                                                            .push().getKey();                                                                                                                                                    Date date = new Date();                                                                                                                                                    SimpleDateFormat formatter = new SimpleDateFormat("EEE, MMM dd hh:mm a");                                                                                                                                                    String dateAndTime = formatter.format(date);                                                                                                                                                    firebaseModel.getReference().child("users")                                                                                                                                                            .child(info.getNick()).child("nontifications")                                                                                                                                                            .child(numToBase).setValue(new Nontification(nick,"не отправлено","запрос"                                                                                                                                                            ,""," "," ","не просмотрено",numToBase,0));                                                                                                                                                    subscribe.setText("Запрошено");                                                                                                                                                    subscribe.setTextColor(Color.parseColor("#F3A2E5"));                                                                                                                                                    subscribe.setBackgroundResource(R.drawable.corners10appcolor2dpstroke);                                                                                                                                                    a=0;                                                                                                                                                }                                                                                                                                            }                                                                                                                                            @Override                                                                                                                                            public void onCancelled(@NonNull DatabaseError error) {                                                                                                                                            }                                                                                                                                        });                                                                                                                                    }                                                                                                                                    if (a == 1) {                                                                                                                                        Log.d("#####", "one  " + a);                                                                                                                                        firebaseModel.getReference().child("users").child(nick).child("subscription")                                                                                                                                                .child(info.getNick()).removeValue();                                                                                                                                        firebaseModel.getReference().child("users").child(info.getNick()).child("subscribers")                                                                                                                                                .child(nick).removeValue();                                                                                                                                        subscribe.setText("Подписаться");                                                                                                                                        subscribe.setTextColor(Color.parseColor("#FFFEFE"));                                                                                                                                        subscribe.setBackgroundResource(R.drawable.corners10dpappcolor);                                                                                                                                        a=0;                                                                                                                                    }                                                                                                                                    if (a == 3) {                                                                                                                                        firebaseModel.getReference().child("users").child(info.getNick()).child("requests")                                                                                                                                                .child(nick).removeValue();                                                                                                                                        subscribe.setText("Подписаться");                                                                                                                                        subscribe.setTextColor(Color.parseColor("#FFFEFE"));                                                                                                                                        subscribe.setBackgroundResource(R.drawable.corners10dpappcolor);                                                                                                                                        a=0;                                                                                                                                    }if (a == 4) {                                                                                                                                        Toast.makeText(v.getContext(), "Пользователь заблокировал тебя", Toast.LENGTH_SHORT).show();                                                                                                                                        a=0;                                                                                                                                    }                                                                                                                                    if (a == 5) {                                                                                                                                        firebaseModel.getUsersReference().child(nick).child("blackList")                                                                                                                                                .child(info.getNick()).removeValue();                                                                                                                                        subscribe.setText("Подписаться");                                                                                                                                        subscribe.setTextColor(Color.parseColor("#FFFEFE"));                                                                                                                                        subscribe.setBackgroundResource(R.drawable.corners10dpappcolor);                                                                                                                                        a=0;                                                                                                                                    }                                                                                                                                }                                                                                                                            }                                                                                                                        }                                                                                                                    });                                                                                                                }                                                                                                            }                                                                                                        });                                                                                                    }                                                                                                }                                                                                            });                                                                                        }                                                                                    }                                                                                });                                                                            }                                                                        });                                                                    }                                                                });                                                            }                                                            else if(profileCheckValue==3) {                                                                subscribeClose.setVisibility(View.VISIBLE);                                                                closeAccount.setVisibility(View.VISIBLE);                                                                subscribeFirst.setVisibility(View.VISIBLE);                                                                blockedAccount.setVisibility(View.GONE);                                                                tabLayoutOther.setVisibility(View.GONE);                                                                viewPagerOther.setVisibility(View.GONE);                                                                subscribeFirst.setText("Подпишись на " + " " + info.getNick() + " !");                                                                message.setVisibility(View.GONE);                                                                subscribe.setVisibility(View.GONE);                                                                moreSquare.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        showBottomSheetDialog();                                                                    }                                                                });                                                                Query queryRequest=firebaseModel.getUsersReference().child(info.getNick())                                                                        .child("requests").child(nick);                                                                queryRequest.addValueEventListener(new ValueEventListener() {                                                                    @Override                                                                    public void onDataChange(@NonNull DataSnapshot snapshot) {                                                                        if(snapshot.exists()){                                                                            a=3;                                                                            subscribeClose.setText("Запрошено");                                                                            subscribeClose.setTextColor(Color.parseColor("#F3A2E5"));                                                                            subscribeClose.setBackgroundResource(R.drawable.corners10appcolor2dpstroke);                                                                        }                                                                    }                                                                    @Override                                                                    public void onCancelled(@NonNull DatabaseError error) {                                                                    }                                                                });                                                                subscribeClose.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        if(a==3){                                                                            Log.d("#####", "ffwd  "+a);                                                                            firebaseModel.getUsersReference().child(info.getNick())                                                                                    .child("requests").child(nick).removeValue();                                                                            subscribeClose.setText("Подписаться");                                                                            subscribeClose.setTextColor(Color.parseColor("#FEFEFE"));                                                                            subscribeClose.setBackgroundResource(R.drawable.corners10dpappcolor);                                                                            a=0;                                                                        }else {                                                                            firebaseModel.getReference().child("users").child(info.getNick()).child("requests")                                                                                    .child(nick).setValue(nick);                                                                            String numToBase=firebaseModel.getReference().child("users")                                                                                    .child(info.getNick()).child("nontifications")                                                                                    .push().getKey();                                                                            Date date = new Date();                                                                            SimpleDateFormat formatter = new SimpleDateFormat("EEE, MMM dd hh:mm a");                                                                            String dateAndTime = formatter.format(date);                                                                            firebaseModel.getReference().child("users")                                                                                    .child(info.getNick()).child("nontifications")                                                                                    .child(numToBase).setValue(new Nontification(nick,"не отправлено","запрос"                                                                                    ,""," "," ","не просмотрено",numToBase,0));                                                                            subscribeClose.setText("Запрошено");                                                                            subscribeClose.setTextColor(Color.parseColor("#F3A2E5"));                                                                            subscribeClose.setBackgroundResource(R.drawable.corners10appcolor2dpstroke);                                                                            a=0;                                                                        }                                                                    }                                                                });                                                            }                                                            else if(profileCheckValue==1) {                                                                subscribeClose.setVisibility(View.VISIBLE);                                                                subscribeClose.setBackgroundResource(R.drawable.corners10grey);                                                                subscribeClose.setTextColor(Color.parseColor("#FEFEFE"));                                                                blockedAccount.setVisibility(View.VISIBLE);                                                                blockedAccount.setText(info.getNick()+" заблокировал тебя");                                                                message.setVisibility(View.GONE);                                                                tabLayoutOther.setVisibility(View.GONE);                                                                viewPagerOther.setVisibility(View.GONE);                                                                Log.d("#####", "tab3");                                                                closeAccount.setVisibility(View.GONE);                                                                subscribeFirst.setVisibility(View.GONE);                                                                subscribe.setVisibility(View.GONE);                                                                moreSquare.setOnClickListener(new View.OnClickListener() {                                                                    @Override                                                                    public void onClick(View v) {                                                                        showBottomSheetDialog();                                                                    }                                                                });                                                            }                                                        }                                                    }                                                }                                            });                                        }                                    });                                }                            }                        });                break;            case "userback":                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(),                        firebaseModel,                        new Callbacks.GetUserNickByUid() {                            @Override                            public void PassUserNick(String nick) {                                nickname.setText(nick);                            }                        });                ImageView imageView1 = view.findViewById(R.id.settingsIcon);                imageView1.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ((MainActivity) getActivity()).setCurrentFragment(SettingsFragment.newInstance("userback",fragment,userInformation));                    }                });                back=view.findViewById(R.id.back);                back.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(fragment, getActivity());                    }                });                OnBackPressedCallback callback = new OnBackPressedCallback(true) {                    @Override                    public void handleOnBackPressed() {                        RecentMethods.setCurrentFragment(fragment, getActivity());                    }                };                requireActivity().getOnBackPressedDispatcher().addCallback(getActivity(), callback);                newLook=view.findViewById(R.id.newLook);                newLook.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(CreateLookFragment.newInstance("userback",fragment,userInformation), getActivity());                    }                });                ///////// I want GM on CF                ImageView arrowtowardrobe1 = view.findViewById(R.id.arrowtowardrobe);                arrowtowardrobe1.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(WardrobeFragment.newInstance("userback",fragment,userInformation), getActivity());                    }                });                TextView editing1 = view.findViewById(R.id.redact);                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                    @Override                    public void PassUserNick(String nick) {                        RecentMethods.getBio(nick, firebaseModel, new Callbacks.GetBio() {                            @Override                            public void GetBiography(String bio) {                                if(bio.equals(null)){                                    editing1.setText("Добавить описание");                                }                            }                        });                    }                });                editing1.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ((MainActivity) getActivity()).setCurrentFragment(EditingFragment.newInstance("userback",fragment,userInformation));                    }                });                //////////////////////////////                viewPager=view.findViewById(R.id.viewPager);                tabLayout=view.findViewById(R.id.tabsprofile);                FragmentManager fm1 = getChildFragmentManager();                fragmentAdapter = new FragmentAdapter(fm1, getLifecycle());                viewPager.setAdapter(fragmentAdapter);                tabLayout.addTab(tabLayout.newTab().setText("Образы"));                tabLayout.addTab(tabLayout.newTab().setText("Одежда"));                tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {                    @Override                    public void onTabSelected(TabLayout.Tab tab) {                        viewPager.setCurrentItem(tab.getPosition());                    }                    @Override                    public void onTabUnselected(TabLayout.Tab tab) {                    }                    @Override                    public void onTabReselected(TabLayout.Tab tab) {                    }                });                viewPager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {                    @Override                    public void onPageSelected(int position) {                        tabLayout.selectTab(tabLayout.getTabAt(position));                    }                });                biographyTextView=view.findViewById(R.id.biography);                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                    @Override                    public void PassUserNick(String nick) {                        RecentMethods.getBio(nicknameCallback, firebaseModel, new Callbacks.GetBio() {                            @Override                            public void GetBiography(String bio) {                                biographyTextView.setText(bio);                            }                        });                    }                });                looksCount=view.findViewById(R.id.looksCount);                subscriptionsCount=view.findViewById(R.id.subscriptionsCount);                subscribersCount=view.findViewById(R.id.subscribersCount);                setCounts();                linearLooksProfile=view.findViewById(R.id.linearLooksProfile);                linearSubscribersProfile=view.findViewById(R.id.subscribersLinearProfile);                linearSubscriptionsProfile=view.findViewById(R.id.subscriptionLinearProfile);                linearSubscribersProfile.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(SubscriberFragment.newInstance("userback",fragment,userInformation), getActivity());                    }                });                linearSubscriptionsProfile.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(SubscriptionsFragment.newInstance("userback",fragment,userInformation), getActivity());                    }                });                ////////////////WARDROBE/////////////                TextView texttowardrobe1 = view.findViewById(R.id.shielf);                texttowardrobe1.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        RecentMethods.setCurrentFragment(WardrobeFragment                                .newInstance("userback",fragment,userInformation), getActivity());                    }                });                wardrobeRecycler=view.findViewById(R.id.recyclerProfileToWardrobe);                noClothes=view.findViewById(R.id.noClothesText);                buyClothesProfile=view.findViewById(R.id.buyClothesProfile);                checkWardrobe();                itemClickListenerWardrobe=new WardrobeAdapterProfile.ItemClickListener() {                    @Override                    public void onItemClick(Clothes clothes) {                        RecentMethods.setCurrentFragment(WardrobeFragment.newInstance("userback",fragment,userInformation), getActivity());                    }                };                //////////////////////////////////////                handler = new Handler(getMainLooper());                //      scene = new SceneLoader(this);                //               scene.init(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2FSciFiHelmet.gltf?alt=media&token=a82512c1-14bf-4faf-8f67-abeb70da7697"));                mainLook=view.findViewById(R.id.mainlookview);                StorageReference storageReference1 = FirebaseStorage.getInstance().getReference().child("Models");                StorageReference islandRef1 = storageReference1.child("models/untitled.gltf");                File localFile1 = null;                try {                    localFile1 = File.createTempFile("model", ".gltf");                } catch (IOException ioException) {                    ioException.printStackTrace();                }                islandRef1.getFile(localFile1).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {                    @Override                    public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {                        // Local temp file has been created                    }                }).addOnFailureListener(new OnFailureListener() {                    @Override                    public void onFailure(@NonNull Exception exception) {                        // Handle any errors                    }                });                loadModels(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2Funtitled.glb?alt=media&token=657b45d7-a84b-4f2a-89f4-a699029401f7"), mainLook, ProfileFragment.this, 0.25f);                loadModels(Uri.parse("https://firebasestorage.googleapis.com/v0/b/schooly-47238.appspot.com/o/3d%20models%2Funtitled.glb?alt=media&token=657b45d7-a84b-4f2a-89f4-a699029401f7"), mainLook, ProfileFragment.this, 0.5f);                break;        }    }    private void AcceptChatRequest() {        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                {                    firebaseModel.getUsersReference().child(info.getNick()).child("Chats").child(nick).child("nick").setValue(nick);                    firebaseModel.getUsersReference().child(nick).child("Chats").child(info.getNick()).child("nick").setValue(nick);                }            }        });    }    public static void sendNickToAdapter(sendNick sendNick){        sendNick.sendNick(sendNickString);    }    public void subscribePeople(){    }    public interface sendNick{        void sendNick(String nick);    }    public void setCounts(){        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                RecentMethods.getSubscriptionList(nick, firebaseModel, new Callbacks.getFriendsList() {                    @Override                    public void getFriendsList(ArrayList<Subscriber> friends) {                        subscriptionsCountString=String.valueOf(friends.size());                        if(Long.valueOf(subscriptionsCountString)<1000){                            subscriptionsCount.setText(subscriptionsCountString);                        }else if(Long.valueOf(subscriptionsCountString)>1000                                && Long.valueOf(subscriptionsCountString)<10000){                            subscriptionsCount.setText(subscriptionsCountString.substring(0, 1)+"."+subscriptionsCountString.substring(1, 2)+"K");                        }                        else if(Long.valueOf(subscriptionsCountString)>10000 &&                                Long.valueOf(subscriptionsCountString)<100000){                            subscriptionsCount.setText(subscriptionsCountString.substring(0, 2)+"."+subscriptionsCountString.substring(2,3)+"K");                        }                        else if(Long.valueOf(subscriptionsCountString)>10000 &&                                Long.valueOf(subscriptionsCountString)<100000){                            subscriptionsCount.setText(subscriptionsCountString.substring(0, 2)+"."+subscriptionsCountString.substring(2,3)+"K");                        }else if(Long.valueOf(subscriptionsCountString)>100000 &&                                Long.valueOf(subscriptionsCountString)<1000000){                            subscriptionsCount.setText(subscriptionsCountString.substring(0, 3)+"K");                        }                        else if(Long.valueOf(subscriptionsCountString)>1000000 &&                                Long.valueOf(subscriptionsCountString)<10000000){                            subscriptionsCount.setText(subscriptionsCountString.substring(0, 1)+"KK");                        }                        else if(Long.valueOf(subscriptionsCountString)>10000000 &&                                Long.valueOf(subscriptionsCountString)<100000000){                            subscriptionsCount.setText(subscriptionsCountString.substring(0, 2)+"KK");                        }                    }                });                RecentMethods.getSubscribersList(nick, firebaseModel, new Callbacks.getSubscribersList() {                    @Override                    public void getSubscribersList(ArrayList<Subscriber> subscribers) {                        subscribersCountString=String.valueOf(subscribers.size());                        if(Long.valueOf(subscribersCountString)<1000){                            subscribersCount.setText(subscribersCountString);                        }else if(Long.valueOf(subscribersCountString)>1000                                && Long.valueOf(subscribersCountString)<10000){                            subscribersCount.setText(subscribersCountString.substring(0, 1)+"."+subscribersCountString.substring(1, 2)+"K");                        }                        else if(Long.valueOf(subscribersCountString)>10000 &&                                Long.valueOf(subscribersCountString)<100000){                            subscribersCount.setText(subscribersCountString.substring(0, 2)+"."+subscribersCountString.substring(2,3)+"K");                        }                        else if(Long.valueOf(subscribersCountString)>10000 &&                                Long.valueOf(subscribersCountString)<100000){                            subscribersCount.setText(subscribersCountString.substring(0, 2)+"."+subscribersCountString.substring(2,3)+"K");                        }else if(Long.valueOf(subscribersCountString)>100000 &&                                Long.valueOf(subscribersCountString)<1000000){                            subscribersCount.setText(subscribersCountString.substring(0, 3)+"K");                        }                        else if(Long.valueOf(subscribersCountString)>1000000 &&                                Long.valueOf(subscribersCountString)<10000000){                            subscribersCount.setText(subscribersCountString.substring(0, 1)+"KK");                        }                        else if(Long.valueOf(subscribersCountString)>10000000 &&                                Long.valueOf(subscribersCountString)<100000000){                            subscribersCount.setText(subscribersCountString.substring(0, 2)+"KK");                        }                    }                });                Query query2=firebaseModel.getUsersReference().child(nick).                        child("looks");                query2.addValueEventListener(new ValueEventListener() {                    @Override                    public void onDataChange(@NonNull DataSnapshot snapshot) {                        ArrayList<NewsItem> lookList = new ArrayList<>();                        for (DataSnapshot snap:snapshot.getChildren()){                            NewsItem newsItem=new NewsItem();                            newsItem.setImageUrl(snap.child("ImageUrl").getValue(String.class));                            newsItem.setLookPrice(snap.child("lookPrice").getValue(Long.class));                            newsItem.setItem_description(snap.child("item_description").getValue(String.class));                            newsItem.setNewsId(snap.child("newsId").getValue(String.class));                            newsItem.setLikesCount(snap.child("likes_count").getValue(String.class));                            newsItem.setViewCount(snap.child("viewCount").getValue(Long.class));                            newsItem.setPostTime(snap.child("postTime").getValue(String.class));                            newsItem.setNick(snap.child("nick").getValue(String.class));                            lookList.add(newsItem);                        }                        looksCount.setText(String.valueOf(lookList.size()));                    }                    @Override                    public void onCancelled(@NonNull DatabaseError error) {                    }                });            }        });    }    public void showDialog() {        final Dialog dialog = new Dialog(getContext());        dialog.setContentView(R.layout.dialog_layout_blacklist);        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        TextView complainTitle = dialog.findViewById(R.id.complainText);        RelativeLayout no=dialog.findViewById(R.id.no);        RelativeLayout yes=dialog.findViewById(R.id.yes);        complainTitle.setText("Заблокировать "+info.getNick()+"?");        no.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                dialog.dismiss();            }        });        yes.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                    @Override                    public void PassUserNick(String nick) {                        firebaseModel.getUsersReference().child(nick)                                .child("blackList").child(info.getNick())                                .setValue(info.getNick());                        firebaseModel.getUsersReference().child(nick)                                .child("subscription").child(info.getNick()).removeValue();                        firebaseModel.getUsersReference().child(info.getNick())                                .child("subscribers").child(nick).removeValue();                        firebaseModel.getUsersReference().child(info.getNick())                                .child("subscription").child(nick).removeValue();                        firebaseModel.getUsersReference().child(nick)                                .child("subscribers").child(info.getNick()).removeValue();                        Toast.makeText(getContext(), "Пользователь добавлен в черный список", Toast.LENGTH_SHORT).show();                    }                });                dialog.dismiss();            }        });        dialog.show();    }    public void checkWardrobe(){        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                RecentMethods.getClothesInWardrobe(nick, firebaseModel, new Callbacks.GetClothes() {                    @Override                    public void getClothes(ArrayList<Clothes> allClothes) {                        if(allClothes.size()==0){                            wardrobeRecycler.setVisibility(View.GONE);                            noClothes.setVisibility(View.VISIBLE);                            buyClothesProfile.setVisibility(View.VISIBLE);                            buyClothesProfile.setOnClickListener(new View.OnClickListener() {                                @Override                                public void onClick(View v) {                                    RecentMethods.setCurrentFragment(ShopFragment.newInstance(userInformation), getActivity());                                }                            });                        }else {                            Collections.reverse(allClothes);                            WardrobeAdapterProfile wardrobeAdapter=new WardrobeAdapterProfile(allClothes,itemClickListenerWardrobe,getActivity());                            wardrobeRecycler.setAdapter(wardrobeAdapter);                        }                    }                });            }        });    }    public void setCountsOther() {        RecentMethods.getSubscriptionList(info.getNick(), firebaseModel, new Callbacks.getFriendsList() {            @Override            public void getFriendsList(ArrayList<Subscriber> friends) {                otherSubscriptionCountString=String.valueOf(friends.size());                if(Long.valueOf(otherSubscriptionCountString)<1000){                    otherSubscriptionCount.setText(otherSubscriptionCountString);                }else if(Long.valueOf(otherSubscriptionCountString)>1000                        && Long.valueOf(otherSubscriptionCountString)<10000){                    otherSubscriptionCount.setText(otherSubscriptionCountString.substring(0, 1)+"."+otherSubscriptionCountString.substring(1, 2)+"K");                }                else if(Long.valueOf(otherSubscriptionCountString)>10000 &&                        Long.valueOf(otherSubscriptionCountString)<100000){                    otherSubscriptionCount.setText(otherSubscriptionCountString.substring(0, 2)+"."+otherSubscriptionCountString.substring(2,3)+"K");                }                else if(Long.valueOf(otherSubscriptionCountString)>10000 &&                        Long.valueOf(otherSubscriptionCountString)<100000){                    otherSubscriptionCount.setText(otherSubscriptionCountString.substring(0, 2)+"."+otherSubscriptionCountString.substring(2,3)+"K");                }else if(Long.valueOf(otherSubscriptionCountString)>100000 &&                        Long.valueOf(otherSubscriptionCountString)<1000000){                    otherSubscriptionCount.setText(otherSubscriptionCountString.substring(0, 3)+"K");                }                else if(Long.valueOf(otherSubscriptionCountString)>1000000 &&                        Long.valueOf(otherSubscriptionCountString)<10000000){                    otherSubscriptionCount.setText(otherSubscriptionCountString.substring(0, 1)+"KK");                }                else if(Long.valueOf(otherSubscriptionCountString)>10000000 &&                        Long.valueOf(otherSubscriptionCountString)<100000000){                    otherSubscriptionCount.setText(otherSubscriptionCountString.substring(0, 2)+"KK");                }            }        });        RecentMethods.getSubscribersList(info.getNick(), firebaseModel, new Callbacks.getSubscribersList() {            @Override            public void getSubscribersList(ArrayList<Subscriber> subscribers) {                otherSubscribersCountString=String.valueOf(subscribers.size());                if(Long.valueOf(otherSubscribersCountString)<1000){                    otherSubscribersCount.setText(otherSubscribersCountString);                }else if(Long.valueOf(otherSubscribersCountString)>1000                        && Long.valueOf(otherSubscribersCountString)<10000){                    otherSubscribersCount.setText(otherSubscribersCountString.substring(0, 1)+"."+otherSubscribersCountString.substring(1, 2)+"K");                }                else if(Long.valueOf(otherSubscribersCountString)>10000 &&                        Long.valueOf(otherSubscribersCountString)<100000){                    otherSubscribersCount.setText(otherSubscribersCountString.substring(0, 2)+"."+otherSubscribersCountString.substring(2,3)+"K");                }                else if(Long.valueOf(otherSubscribersCountString)>10000 &&                        Long.valueOf(otherSubscribersCountString)<100000){                    otherSubscribersCount.setText(otherSubscribersCountString.substring(0, 2)+"."+otherSubscribersCountString.substring(2,3)+"K");                }else if(Long.valueOf(otherSubscribersCountString)>100000 &&                        Long.valueOf(otherSubscribersCountString)<1000000){                    otherSubscribersCount.setText(otherSubscribersCountString.substring(0, 3)+"K");                }                else if(Long.valueOf(otherSubscribersCountString)>1000000 &&                        Long.valueOf(otherSubscribersCountString)<10000000){                    otherSubscribersCount.setText(otherSubscribersCountString.substring(0, 1)+"KK");                }                else if(Long.valueOf(otherSubscribersCountString)>10000000 &&                        Long.valueOf(otherSubscribersCountString)<100000000){                    otherSubscribersCount.setText(otherSubscribersCountString.substring(0, 2)+"KK");                }            }        });        Query query2=firebaseModel.getUsersReference().child(info.getNick()).                child("looks");        query2.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                ArrayList<NewsItem> lookList = new ArrayList<>();                for (DataSnapshot snap:snapshot.getChildren()){                    NewsItem newsItem=new NewsItem();                    newsItem.setImageUrl(snap.child("ImageUrl").getValue(String.class));                    newsItem.setLookPrice(snap.child("lookPrice").getValue(Long.class));                    newsItem.setItem_description(snap.child("item_description").getValue(String.class));                    newsItem.setNewsId(snap.child("newsId").getValue(String.class));                    newsItem.setLikesCount(snap.child("likes_count").getValue(String.class));                    newsItem.setViewCount(snap.child("viewCount").getValue(Long.class));                    newsItem.setPostTime(snap.child("postTime").getValue(String.class));                    newsItem.setNick(snap.child("nick").getValue(String.class));                    lookList.add(newsItem);                }                otherLooksCount.setText(String.valueOf(lookList.size()));            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });    }    public void checkOtherUserProfile(){        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                firebaseModel.getUsersReference().child(info.getNick())                        .child("blackList").child(nick).get().addOnCompleteListener(new OnCompleteListener<DataSnapshot>() {                    @Override                    public void onComplete(@NonNull Task<DataSnapshot> task) {                        if(task.isSuccessful()){                            DataSnapshot snapshot=task.getResult();                            if(snapshot.exists()){                                profileCheckValue=1;                            }else {                                profileCheckValue=2;                            }                        }                    }                });            }        });    }    public float[] getBackgroundColor() {        return backgroundColor;    }////    @Override//    public void onPause() {//        super.onPause();//        switch (type) {//            case "user"://                //loadModels(loadUrl);//                mainLook.pause();//                break;//            case "other"://                otherMainLook.pause();//                break;//        }////    }//    @Override//    public void onResume() {//        super.onResume();//        try {//            switch (type) {//                case "user"://                    //loadModels(loadUrl);//                    mainLook.resume();//                    break;//                case "other"://                    otherMainLook.resume();//                    break;//            }//////        } catch (CameraNotAvailableException e) {//            e.printStackTrace();//        }////    }    @RequiresApi(api = Build.VERSION_CODES.N)    public void loadModels(Uri url, SceneView sceneView, Fragment fragment, float scale) {        if(getContext()==null){        }else {            ModelRenderable.builder()                    .setSource(                            fragment.getContext(), new RenderableSource.Builder().setSource(                                    fragment.getContext(),                                    url,                                    RenderableSource.SourceType.GLB                            ).setScale(scale)                                    .setRecenterMode(RenderableSource.RecenterMode.CENTER)                                    .build()                    )                    .setRegistryId(url)                    .build()                    .thenAccept(new Consumer<ModelRenderable>() {                        @Override                        public void accept(ModelRenderable modelRenderable) {                            addNode(modelRenderable, sceneView);                        }                    });        }    }    public void addNode(ModelRenderable modelRenderable, SceneView sceneView) {        Node modelNode1 = new Node();        modelNode1.setRenderable(modelRenderable);        modelNode1.setLocalScale(new Vector3(0.3f, 0.3f, 0.3f));//        modelNode1.setLocalRotation(Quaternion.multiply(//                Quaternion.axisAngle(new Vector3(1f, 0f, 0f), 45),//                Quaternion.axisAngle(new Vector3(0f, 1f, 0f), 75)));        modelNode1.setLocalPosition(new Vector3(0f, 0f, -0.9f));        sceneView.getScene().addChild(modelNode1);        try {            sceneView.resume();        } catch (CameraNotAvailableException e) {            e.printStackTrace();        }    }    public class FragmentAdapter extends FragmentStateAdapter {        public FragmentAdapter(@NonNull FragmentManager fragmentManager, @NonNull Lifecycle lifecycle) {            super(fragmentManager, lifecycle);        }        @NonNull        @Override        public Fragment createFragment ( int position){            switch (position) {                case 1:                    return new ClothesFragmentProfile(type,fragment,userInformation);            }            return new LooksFragmentProfile(type,fragment,userInformation);        }        @Override        public int getItemCount() {            return 2;        }    }    public class FragmentAdapterOther extends FragmentStateAdapter {        public FragmentAdapterOther(@NonNull FragmentManager fragmentManager, @NonNull Lifecycle lifecycle) {            super(fragmentManager, lifecycle);        }        @NonNull        @Override        public Fragment createFragment ( int position){            switch (position) {                case 1:                    return new ClothesFragmentProfileOther(info.getNick(),fragment,userInformation);            }            return new LooksFragmentProfileOther(info.getNick(),fragment,userInformation);        }        @Override        public int getItemCount() {            return 2;        }    }    private void showBottomSheetDialog() {        final BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(getContext());        bottomSheetDialog.setContentView(R.layout.bottom_sheet_dialog_profile);        TextView block,complain,deleteSubscriber,shareProfile;        block=bottomSheetDialog.findViewById(R.id.block);        complain=bottomSheetDialog.findViewById(R.id.complain);        deleteSubscriber=bottomSheetDialog.findViewById(R.id.deleteSubscriber);        shareProfile=bottomSheetDialog.findViewById(R.id.shareProfile);        block.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showDialog();            }        });        complain.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                RecentMethods.setCurrentFragment(ComplainFragment.newInstance(info.getNick(),fragment,userInformation), getActivity());                bottomSheetDialog.dismiss();            }        });        deleteSubscriber.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                    @Override                    public void PassUserNick(String nick) {                        Query query3=firebaseModel.getUsersReference().child(sendNick)                                .child("subscription").child(nick);                        query3.addValueEventListener(new ValueEventListener() {                            @Override                            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                                if(dataSnapshot.exists()){                                    firebaseModel.getUsersReference().child(nick)                                            .child("subscribers").child(info.getNick()).removeValue();                                    firebaseModel.getUsersReference().child(info.getNick())                                            .child("subscription").child(nick).removeValue();                                    Toast.makeText(getContext(), "Пользователь удален из подписчиков", Toast.LENGTH_SHORT).show();                                }else {                                    Toast.makeText(getContext(), "Пользователь не подписан на тебя", Toast.LENGTH_SHORT).show();                                }                            }                            @Override                            public void onCancelled(@NonNull DatabaseError databaseError) {                            }                        });                    }                });            }        });        shareProfile.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showBottomSheetDialogSend();            }        });        bottomSheetDialog.show();    }    private void showBottomSheetDialogSend() {        final BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(getContext());        bottomSheetDialog.setContentView(R.layout.bottom_sheet_dialog_layout);        editText=bottomSheetDialog.findViewById(R.id.searchuser);        recyclerView=bottomSheetDialog.findViewById(R.id.recyclerView);        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));        emptyList=bottomSheetDialog.findViewById(R.id.emptySubscribersList);        messageEdit=bottomSheetDialog.findViewById(R.id.message);        itemClickListenerSendLookAdapter=new SendLookAdapter.ItemClickListener() {            @Override            public void onItemClick(String otherUserNick, String type) {                if(type.equals("send")){                    Log.d("###", type);                }else {                    Log.d("####", type);                }            }        };        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                RecentMethods.getSubscriptionList(nick, firebaseModel, new Callbacks.getFriendsList() {                    @Override                    public void getFriendsList(ArrayList<Subscriber> friends) {                        if (friends.size()==0){                            emptyList.setVisibility(View.VISIBLE);                            recyclerView.setVisibility(View.GONE);                        }else {                            SendLookAdapter sendLookAdapter = new SendLookAdapter(friends,itemClickListenerSendLookAdapter);                            recyclerView.setAdapter(sendLookAdapter);                        }                    }                });            }        });        initUserEnter();        bottomSheetDialog.show();    }    public void initUserEnter() {        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {            @Override            public void PassUserNick(String nick) {                editText.addTextChangedListener(new TextWatcher() {                    @Override                    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {                    }                    @Override                    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {                        userName = String.valueOf(editText.getText()).trim();                        userName = userName.toLowerCase();                        Query query = firebaseModel.getUsersReference().child(nick).child("subscription");                        query.addValueEventListener(new ValueEventListener() {                            @Override                            public void onDataChange(@NonNull DataSnapshot snapshot) {                                ArrayList<Subscriber> userFromBase = new ArrayList<>();                                for (DataSnapshot snap : snapshot.getChildren()) {                                    Subscriber subscriber = new Subscriber();                                    subscriber.setSub(snap.getValue(String.class));                                    String nick = subscriber.getSub();                                    int valueLetters = userName.length();                                    nick = nick.toLowerCase();                                    if (nick.length() < valueLetters) {                                        if (nick.equals(userName))                                            userFromBase.add(subscriber);                                    } else {                                        nick = nick.substring(0, valueLetters);                                        if (nick.equals(userName))                                            userFromBase.add(subscriber);                                    }                                }                                SendLookAdapter sendLookAdapter = new SendLookAdapter(userFromBase,itemClickListenerSendLookAdapter);                                recyclerView.setAdapter(sendLookAdapter);                            }                            @Override                            public void onCancelled(@NonNull DatabaseError error) {                            }                        });                    }                    @Override                    public void afterTextChanged(Editable editable) {                        RecentMethods.UserNickByUid(firebaseModel.getUser().getUid(), firebaseModel, new Callbacks.GetUserNickByUid() {                            @Override                            public void PassUserNick(String nick) {                            }                        });                    }                });            }        });    }}